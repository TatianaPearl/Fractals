<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension="Generated.cs" #>
// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Threading;

namespace Fractals.Utility
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "HitPlot4x4.tt", "1.0.0.0" )]
    public sealed class HitPlot4x4 : IHitPlot
    {
        private readonly int _fourthWidth;
        private readonly int _fourthHeight;

        public Size Resolution { get; private set; }

<#
    foreach( var row in Enumerable.Range(0,4) )
    {
        foreach( var col in Enumerable.Range(0,4) )
        {
#>
        private readonly int[] _hits<#= col #><#= row #>;
<#            
        }
    }
#>

        public HitPlot4x4(Size resolution)
        {
            Resolution = resolution;

            _fourthWidth = resolution.Width / 4;
            _fourthHeight = resolution.Height / 4;

            int quadrantSize = _fourthWidth * _fourthHeight;

<#
    foreach( var row in Enumerable.Range(0,4) )
    {
        foreach( var col in Enumerable.Range(0,4) )
        {
#>
            _hits<#= col #><#= row #> = new int[quadrantSize];
<#            
        }
    }
#>
        }

        public void SaveTrajectories(string filePath)
        {
            using (var file = new FileStream(filePath, FileMode.Create))
            {
<#
    foreach( var row in Enumerable.Range(0,4) )
    {
        foreach( var col in Enumerable.Range(0,4) )
        {
#>
                foreach (var i in _hits<#= col #><#= row #>)
                {
                    var buffer = BitConverter.GetBytes(i);
                    file.Write(buffer, 0, buffer.Count());
                }
<#            
        }
    }
#>
                file.Flush();
                file.Close();
            }
        }

        public void LoadTrajectories(string filePath)
        {
            using (var file = File.OpenRead(filePath))
            {
                const int intSize = sizeof(Int32);
                var buffer = new byte[sizeof(Int32)];

<#
    foreach( var row in Enumerable.Range(0,4) )
    {
        foreach( var col in Enumerable.Range(0,4) )
        {
#>
                for(int i = 0; i < _hits<#= col #><#= row #>.Length; i++)
                {
                    file.Read(buffer, 0, intSize);
                    _hits<#= col #><#= row #>[i] = BitConverter.ToInt32(buffer, 0);
                }
<#            
        }
    }
#>
            }
        }

        private int[] GetSegment(int x, int y)
        {
            var xQuadrant = x / _fourthWidth;
            var yQuadrant = y / _fourthHeight;

            // Handle points that fall exactly on the edge
            if (xQuadrant == 4)
                xQuadrant--;
            if (yQuadrant == 4)
                yQuadrant--;

            switch (xQuadrant)
            {
<#
    foreach( var col in Enumerable.Range(0,4) )
    {
#>
                case <#= col #>:
                    switch( yQuadrant )
                    {
<#
        foreach( var row in Enumerable.Range(0,4) )
        {
#>
                        case <#= row #>:
                            return _hits<#= col #><#= row #>;
<#
        }
#>

                        default:
                            throw new Exception("Y coordinate was out of bounds");
                    }
<#
    }
#>
                default:
                    throw new Exception("X coordinate was out of bounds");
            }
        }

        public void IncrementPoint(Point p)
        {
            var segment = GetSegment(p.X, p.Y);

            var offset = (p.X % _fourthWidth) + (_fourthWidth * (p.Y % _fourthHeight));

            Interlocked.Increment(ref segment[offset]);
        }

        public int GetHitsForPoint(Point p)
        {
            var segment = GetSegment(p.X, p.Y);

            var offset = (p.X % _fourthWidth) + (_fourthWidth * (p.Y % _fourthHeight));

            return segment[offset];
        }

        public int Max()
        {
            return GetMergedCollection().Max();
        }

        public long Sum()
        {
            return GetMergedCollection().Sum(i => (long) i);
        }

        private IEnumerable<int> GetMergedCollection()
        {
            return GetCollections().SelectMany(i => i);
        }

        private IEnumerable<int[]> GetCollections()
        {
<#
    foreach( var row in Enumerable.Range(0,4) )
    {
        foreach( var col in Enumerable.Range(0,4) )
        {
#>
            yield return _hits<#= col #><#= row #>;
<#            
        }
    }
#>
        }
    }
}